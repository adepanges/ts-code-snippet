{"file":"tmp/src/services/TeamRetro.service.ts","start_line":3,"start_character":38,"end_line":164,"end_character":1,"code_snippet":"export abstract class TeamRetroService {\n  /**\n   * Get authentication headers based on the auth type\n   * @returns Authentication headers\n   * @throws ErrorMCP on invalid auth type or missing credentials\n   */\n  protected getAuthHeaders(): Record<string, string> {\n    switch (config.auth.type) {\n      case \"apiKey\":\n        if (!config.auth.apiKey) {\n          throw new ErrorMCP(\"API_KEY_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { \"X-API-KEY\": config.auth.apiKey };\n\n      case \"basic\":\n        if (!config.auth.username || !config.auth.password) {\n          throw new ErrorMCP(\"AUTH_CREDENTIALS_REQUIRED\", \"AUTH_ERROR\");\n        }\n        const basicAuth = Buffer.from(\n          `${config.auth.username}:${config.auth.password}`\n        ).toString(\"base64\");\n        return { Authorization: `Basic ${basicAuth}` };\n\n      case \"bearer\":\n        if (!config.auth.token) {\n          throw new ErrorMCP(\"TOKEN_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { Authorization: `Bearer ${config.auth.token}` };\n\n      default:\n        throw new ErrorMCP(\"INVALID_AUTH_TYPE\", \"AUTH_ERROR\");\n    }\n  }\n\n  /**\n   * Base HTTP GET request handler\n   * @param endpoint API endpoint\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */\n  protected async get<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, options);\n  }\n\n  /**\n   * Base HTTP PATCH request handler\n   * @param endpoint API endpoint\n   * @param body Request body\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */\n  protected async patch<T>(\n    endpoint: string,\n    body: unknown,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PATCH\",\n      body: JSON.stringify(body),\n    });\n  }\n\n  /**\n   * Base HTTP POST request handler\n   * @param endpoint API endpoint\n   * @param body Request body\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */\n  protected async post<T>(\n    endpoint: string,\n    body: unknown,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"POST\",\n      body: JSON.stringify(body),\n    });\n  }\n\n  /**\n   * Base HTTP DELETE request handler\n   * @param endpoint API endpoint\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */\n  protected async delete<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"DELETE\",\n    });\n  }\n\n  /**\n   * Base HTTP PUT request handler\n   * @param endpoint API endpoint\n   * @param body Request body\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */\n  protected async put<T>(\n    endpoint: string,\n    body: unknown,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    });\n  }\n\n  /**\n   * Base HTTP request handler\n   * @param endpoint API endpoint\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${config.baseUrl}${endpoint}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      ...this.getAuthHeaders(),\n      ...options.headers,\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      if (!response.ok) {\n        throw new ErrorMCP(\"API_REQUEST_FAILED\", response.status.toString());\n      }\n\n      return response.json();\n    } catch (error) {\n      if (error instanceof ErrorMCP) {\n        throw error;\n      }\n      throw new ErrorMCP(\"REQUEST_FAILED\", \"REQUEST_ERROR\");\n    }\n  }\n}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":4,"start_character":2,"end_line":8,"end_character":5,"code_snippet":"  /**\n   * Get authentication headers based on the auth type\n   * @returns Authentication headers\n   * @throws ErrorMCP on invalid auth type or missing credentials\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":9,"start_character":52,"end_line":35,"end_character":3,"code_snippet":"  protected getAuthHeaders(): Record<string, string> {\n    switch (config.auth.type) {\n      case \"apiKey\":\n        if (!config.auth.apiKey) {\n          throw new ErrorMCP(\"API_KEY_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { \"X-API-KEY\": config.auth.apiKey };\n\n      case \"basic\":\n        if (!config.auth.username || !config.auth.password) {\n          throw new ErrorMCP(\"AUTH_CREDENTIALS_REQUIRED\", \"AUTH_ERROR\");\n        }\n        const basicAuth = Buffer.from(\n          `${config.auth.username}:${config.auth.password}`\n        ).toString(\"base64\");\n        return { Authorization: `Basic ${basicAuth}` };\n\n      case \"bearer\":\n        if (!config.auth.token) {\n          throw new ErrorMCP(\"TOKEN_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { Authorization: `Bearer ${config.auth.token}` };\n\n      default:\n        throw new ErrorMCP(\"INVALID_AUTH_TYPE\", \"AUTH_ERROR\");\n    }\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":10,"start_character":29,"end_line":34,"end_character":5,"code_snippet":"    switch (config.auth.type) {\n      case \"apiKey\":\n        if (!config.auth.apiKey) {\n          throw new ErrorMCP(\"API_KEY_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { \"X-API-KEY\": config.auth.apiKey };\n\n      case \"basic\":\n        if (!config.auth.username || !config.auth.password) {\n          throw new ErrorMCP(\"AUTH_CREDENTIALS_REQUIRED\", \"AUTH_ERROR\");\n        }\n        const basicAuth = Buffer.from(\n          `${config.auth.username}:${config.auth.password}`\n        ).toString(\"base64\");\n        return { Authorization: `Basic ${basicAuth}` };\n\n      case \"bearer\":\n        if (!config.auth.token) {\n          throw new ErrorMCP(\"TOKEN_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { Authorization: `Bearer ${config.auth.token}` };\n\n      default:\n        throw new ErrorMCP(\"INVALID_AUTH_TYPE\", \"AUTH_ERROR\");\n    }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":11,"start_character":20,"end_line":15,"end_character":51,"code_snippet":"      case \"apiKey\":\n        if (!config.auth.apiKey) {\n          throw new ErrorMCP(\"API_KEY_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { \"X-API-KEY\": config.auth.apiKey };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":12,"start_character":32,"end_line":14,"end_character":9,"code_snippet":"        if (!config.auth.apiKey) {\n          throw new ErrorMCP(\"API_KEY_REQUIRED\", \"AUTH_ERROR\");\n        }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":15,"start_character":14,"end_line":15,"end_character":50,"code_snippet":"        return { \"X-API-KEY\": config.auth.apiKey };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":17,"start_character":19,"end_line":24,"end_character":55,"code_snippet":"      case \"basic\":\n        if (!config.auth.username || !config.auth.password) {\n          throw new ErrorMCP(\"AUTH_CREDENTIALS_REQUIRED\", \"AUTH_ERROR\");\n        }\n        const basicAuth = Buffer.from(\n          `${config.auth.username}:${config.auth.password}`\n        ).toString(\"base64\");\n        return { Authorization: `Basic ${basicAuth}` };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":18,"start_character":59,"end_line":20,"end_character":9,"code_snippet":"        if (!config.auth.username || !config.auth.password) {\n          throw new ErrorMCP(\"AUTH_CREDENTIALS_REQUIRED\", \"AUTH_ERROR\");\n        }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":21,"start_character":37,"end_line":23,"end_character":9,"code_snippet":"        const basicAuth = Buffer.from(\n          `${config.auth.username}:${config.auth.password}`\n        ).toString(\"base64\");"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":22,"start_character":10,"end_line":22,"end_character":59,"code_snippet":"          `${config.auth.username}:${config.auth.password}`"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":24,"start_character":14,"end_line":24,"end_character":54,"code_snippet":"        return { Authorization: `Basic ${basicAuth}` };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":24,"start_character":32,"end_line":24,"end_character":52,"code_snippet":"        return { Authorization: `Basic ${basicAuth}` };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":26,"start_character":20,"end_line":30,"end_character":64,"code_snippet":"      case \"bearer\":\n        if (!config.auth.token) {\n          throw new ErrorMCP(\"TOKEN_REQUIRED\", \"AUTH_ERROR\");\n        }\n        return { Authorization: `Bearer ${config.auth.token}` };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":27,"start_character":31,"end_line":29,"end_character":9,"code_snippet":"        if (!config.auth.token) {\n          throw new ErrorMCP(\"TOKEN_REQUIRED\", \"AUTH_ERROR\");\n        }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":30,"start_character":14,"end_line":30,"end_character":63,"code_snippet":"        return { Authorization: `Bearer ${config.auth.token}` };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":30,"start_character":32,"end_line":30,"end_character":61,"code_snippet":"        return { Authorization: `Bearer ${config.auth.token}` };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":32,"start_character":14,"end_line":33,"end_character":62,"code_snippet":"      default:\n        throw new ErrorMCP(\"INVALID_AUTH_TYPE\", \"AUTH_ERROR\");"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":37,"start_character":2,"end_line":43,"end_character":5,"code_snippet":"  /**\n   * Base HTTP GET request handler\n   * @param endpoint API endpoint\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":44,"start_character":24,"end_line":49,"end_character":3,"code_snippet":"  protected async get<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, options);\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":46,"start_character":26,"end_line":46,"end_character":29,"code_snippet":"    options: RequestInit = {}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":51,"start_character":2,"end_line":58,"end_character":5,"code_snippet":"  /**\n   * Base HTTP PATCH request handler\n   * @param endpoint API endpoint\n   * @param body Request body\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":59,"start_character":26,"end_line":69,"end_character":3,"code_snippet":"  protected async patch<T>(\n    endpoint: string,\n    body: unknown,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PATCH\",\n      body: JSON.stringify(body),\n    });\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":62,"start_character":26,"end_line":62,"end_character":29,"code_snippet":"    options: RequestInit = {}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":64,"start_character":26,"end_line":68,"end_character":6,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PATCH\",\n      body: JSON.stringify(body),\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":64,"start_character":37,"end_line":68,"end_character":5,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PATCH\",\n      body: JSON.stringify(body),\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":71,"start_character":2,"end_line":78,"end_character":5,"code_snippet":"  /**\n   * Base HTTP POST request handler\n   * @param endpoint API endpoint\n   * @param body Request body\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":79,"start_character":25,"end_line":89,"end_character":3,"code_snippet":"  protected async post<T>(\n    endpoint: string,\n    body: unknown,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"POST\",\n      body: JSON.stringify(body),\n    });\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":82,"start_character":26,"end_line":82,"end_character":29,"code_snippet":"    options: RequestInit = {}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":84,"start_character":26,"end_line":88,"end_character":6,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"POST\",\n      body: JSON.stringify(body),\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":84,"start_character":37,"end_line":88,"end_character":5,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"POST\",\n      body: JSON.stringify(body),\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":91,"start_character":2,"end_line":97,"end_character":5,"code_snippet":"  /**\n   * Base HTTP DELETE request handler\n   * @param endpoint API endpoint\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":98,"start_character":27,"end_line":106,"end_character":3,"code_snippet":"  protected async delete<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"DELETE\",\n    });\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":100,"start_character":26,"end_line":100,"end_character":29,"code_snippet":"    options: RequestInit = {}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":102,"start_character":26,"end_line":105,"end_character":6,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"DELETE\",\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":102,"start_character":37,"end_line":105,"end_character":5,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"DELETE\",\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":108,"start_character":2,"end_line":115,"end_character":5,"code_snippet":"  /**\n   * Base HTTP PUT request handler\n   * @param endpoint API endpoint\n   * @param body Request body\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":116,"start_character":24,"end_line":126,"end_character":3,"code_snippet":"  protected async put<T>(\n    endpoint: string,\n    body: unknown,\n    options: RequestInit = {}\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    });\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":119,"start_character":26,"end_line":119,"end_character":29,"code_snippet":"    options: RequestInit = {}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":121,"start_character":26,"end_line":125,"end_character":6,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":121,"start_character":37,"end_line":125,"end_character":5,"code_snippet":"    return this.request<T>(endpoint, {\n      ...options,\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":128,"start_character":2,"end_line":134,"end_character":5,"code_snippet":"  /**\n   * Base HTTP request handler\n   * @param endpoint API endpoint\n   * @param options Fetch options\n   * @returns Parsed response data\n   * @throws ErrorMCP on request failure\n   */"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":135,"start_character":26,"end_line":163,"end_character":3,"code_snippet":"  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${config.baseUrl}${endpoint}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      ...this.getAuthHeaders(),\n      ...options.headers,\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      if (!response.ok) {\n        throw new ErrorMCP(\"API_REQUEST_FAILED\", response.status.toString());\n      }\n\n      return response.json();\n    } catch (error) {\n      if (error instanceof ErrorMCP) {\n        throw error;\n      }\n      throw new ErrorMCP(\"REQUEST_FAILED\", \"REQUEST_ERROR\");\n    }\n  }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":137,"start_character":26,"end_line":137,"end_character":29,"code_snippet":"    options: RequestInit = {}"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":139,"start_character":16,"end_line":139,"end_character":46,"code_snippet":"    const url = `${config.baseUrl}${endpoint}`;"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":140,"start_character":19,"end_line":144,"end_character":5,"code_snippet":"    const headers = {\n      \"Content-Type\": \"application/json\",\n      ...this.getAuthHeaders(),\n      ...options.headers,\n    };"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":146,"start_character":7,"end_line":157,"end_character":5,"code_snippet":"    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      if (!response.ok) {\n        throw new ErrorMCP(\"API_REQUEST_FAILED\", response.status.toString());\n      }\n\n      return response.json();\n    } catch (error) {"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":147,"start_character":34,"end_line":150,"end_character":8,"code_snippet":"      const response = await fetch(url, {\n        ...options,\n        headers,\n      });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":147,"start_character":40,"end_line":150,"end_character":7,"code_snippet":"      const response = await fetch(url, {\n        ...options,\n        headers,\n      });"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":152,"start_character":23,"end_line":154,"end_character":7,"code_snippet":"      if (!response.ok) {\n        throw new ErrorMCP(\"API_REQUEST_FAILED\", response.status.toString());\n      }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":157,"start_character":19,"end_line":162,"end_character":5,"code_snippet":"    } catch (error) {\n      if (error instanceof ErrorMCP) {\n        throw error;\n      }\n      throw new ErrorMCP(\"REQUEST_FAILED\", \"REQUEST_ERROR\");\n    }"}
{"file":"tmp/src/services/TeamRetro.service.ts","start_line":158,"start_character":36,"end_line":160,"end_character":7,"code_snippet":"      if (error instanceof ErrorMCP) {\n        throw error;\n      }"}